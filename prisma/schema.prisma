// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String?
  gender    String?
  birthday  DateTime?
  phoneNumber String?
  createdAt DateTime @default(now())
  profile   Profile?
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  sentLikes        Like[]    @relation("SentLikes")
  receivedLikes    Like[]    @relation("ReceivedLikes")
}

model Profile {
  id          Int      @id @default(autoincrement())
  bio         String?
  photos      String[]
  prompts     String[]
  profileIcon String?
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  senderId  Int
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  recipientId Int
  recipient User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  likerId   Int
  liker     User     @relation("SentLikes", fields: [likerId], references: [id])
  likedId   Int
  liked     User     @relation("ReceivedLikes", fields: [likedId], references: [id])
}